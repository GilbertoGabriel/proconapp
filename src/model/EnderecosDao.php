<?php
			
	/**
	 * Generated by Getz Framework
	 * 
	 * @author Mario Sakamoto <mskamot@gmail.com>
	 * @see https://wtag.com.br/getz 
	 */
	 
	namespace src\model; 
	
	class EnderecosDao {
	
		private $connection;
		
		/*
		 * Constant variables
		 */
		private $create = "INSERT INTO enderecos (
				logradouro
				, numero
				, bairro
				, cidade
				, complemento
				, cep
				, cadastrado
				, modificado
				) VALUES";
				
		public $read = 
				"enderecos.id AS \"enderecos.id\"
				, enderecos.logradouro AS \"enderecos.logradouro\"
				, enderecos.numero AS \"enderecos.numero\"
				, enderecos.bairro AS \"enderecos.bairro\"
				, enderecos.cidade AS \"enderecos.cidade\"
				, enderecos.complemento AS \"enderecos.complemento\"
				, enderecos.cep AS \"enderecos.cep\"
				, enderecos.cadastrado AS \"enderecos.cadastrado\"
				, enderecos.modificado AS \"enderecos.modificado\"
				";
				
		private $update = "UPDATE enderecos SET";
		private $delete = "DELETE FROM enderecos";
		
		public $from = "enderecos enderecos";
		
		/*
		 * Parameters
		 */
		private $where;
		private $order;
		
		// Dynamic query
		private $sql;
		
		// Controller response
		private $response;	
		
		/**
		 * @param {Object} connection
		 */
		public function __construct($connection) {
			$this->connection = $connection;
		}

		/**
		 * @param {Enderecos}enderecos
		 */
		public function setCreate($enderecos) {		
			$this->sql = $this->create . " (\"" . 
					$enderecos->getLogradouro() .
					"\", \"" . $enderecos->getNumero() .
					"\", \"" . $enderecos->getBairro() .
					"\", \"" . $enderecos->getCidade() .
					"\", \"" . $enderecos->getComplemento() .
					"\", \"" . $enderecos->getCep() .
					"\", \"" . $enderecos->getCadastrado() .
					"\", \"" . $enderecos->getModificado() .
					"\")";
		}
		
		/**
		 * @return {String}
		 */
		public function getCreate() {
			return $this->sql;
		}	
		
		/**
		 * @param {String} where
		 * @param {String} order
		 */
		public function setRead($where, $order) {
			
			$this->setWhere($where);
			$this->setOrder($order);
			
			$this->sql = "SELECT " . $this->read . " FROM " . $this->getFrom() . 
					$this->getWhere() . "
				" . $this->getOrder();
		}
		
		/**
		 * @return {String}
		 */
		public function getRead() {
			return $this->sql;
		}
		
		/**
		 * @param {Enderecos}enderecos  
		 * @param {String} where
		 */
		public function setUpdate($enderecos, $where) {
			$this->setWhere($where);
			
			$this->sql = $this->update . 
					" id = \"" . $enderecos->getId() . 
					"\", logradouro = \"" . $enderecos->getLogradouro() . 
					"\", numero = \"" . $enderecos->getNumero() . 
					"\", bairro = \"" . $enderecos->getBairro() . 
					"\", cidade = \"" . $enderecos->getCidade() . 
					"\", complemento = \"" . $enderecos->getComplemento() . 
					"\", cep = \"" . $enderecos->getCep() . 
					"\", modificado = \"" . $enderecos->getModificado() . 
					"\"" . $this->getWhere();
		}
		
		/**
		 * @return {String}
		 */
		public function getUpdate() {
			return $this->sql;
		}
		
		/**
		 * @param {String} where
		 */
		public function setDelete($where) {	
			$this->setWhere($where);
			
			$this->sql = $this->delete . $this->getWhere();
		}
		
		/**
		 * @return {String}
		 */
		public function getDelete() {
			return $this->sql;
		}
		
		/**
		 * @return {String}
		 */
		public function getFrom() {
			return $this->from;
		}
		
		/**
		 * @param {String} where
		 */
		public function setWhere($where) {
			if ($where != "")
				$this->where = " WHERE " . $where;
			else
				$this->where = "";
		}
		
		/**
		 * @return {String}
		 */
		public function getWhere() {
			return $this->where;
		}
		
		/**
		 * @param {String} order
		 */
		public function setOrder($order) {
			if ($order != "")
				$this->order = " ORDER BY " . $order;
			else
				$this->order = "";
		}
		
		/**
		 * @return {String}
		 */
		public function getOrder() {
			return $this->order;
		}
		
		/**
		 * @param {Integer} line
		 * @param column String
		 * @param value String
		 */
		private function setResponse($line, $column, $value) {
			$this->response[$line][$column] = $value;
		}

		/**
		 * @return {Array}
		 */
		private function getResponse() {
			return $this->response;
		}

		/**
		 * @param {String} where
		 */
		private function setSize($where) {
			$this->setWhere($where);
			
			$result = $this->connection->execute(
					"SELECT count(1) AS \"enderecos.size\" from enderecos" . $this->getWhere());

			while ($row = $result->fetch_assoc()) {		
				$this->setResponse(0, "enderecos.size", $row["enderecos.size"]);
				
				$pages = ceil($row["enderecos.size"] / $this->connection->getItensPerPage());
				
				$this->setResponse(0, "enderecos.page", $this->connection->getPosition());
				$this->setResponse(0, "enderecos.pages", $pages);
				
				$pagination = "<select id='gz-select-pagination' onchange='goPage();'>";
				
				for ($i = 1; $i <= $pages; $i++) {
					if ($i == $this->connection->getPosition())
						$pagination .= "<option value='" . $i . "' selected>" . $i . "</option>";
					else
						$pagination .= "<option value='" . $i . "'>" . $i . "</option>";
				}	

				$pagination .= "</select>";
						
				$this->setResponse(0, "enderecos.pagination", $pagination);
			}

			$this->connection->free($result);
		}
		
		/**
		 * @param {Integer} line
		 */
		public function setDivLine($line) {
			$this->setResponse($line - 1, "@_START_LINE_TWO", modelStartLine($line, 2));
			$this->setResponse($line - 1, "@_END_LINE_TWO", modelEndLine($line, 2));

			$this->setResponse($line - 1, "@_START_LINE_THREE", modelStartLine($line, 3));
			$this->setResponse($line - 1, "@_END_LINE_THREE", modelEndLine($line, 3));
			
			$this->setResponse($line - 1, "@_START_LINE_FOUR", modelStartLine($line, 4));
			$this->setResponse($line - 1, "@_END_LINE_FOUR", modelEndLine($line, 4));
		}
		
		/**
		 * @param {Integer} line
		 */
		public function checkDivLine($line) {
			if (modelCheckEndLine($line, 2) != "")
				$this->setResponse($line - 1, "@_END_LINE_TWO", modelCheckEndLine($line, 2));
			
			if (modelCheckEndLine($line, 3) != "")
				$this->setResponse($line - 1, "@_END_LINE_THREE", modelCheckEndLine($line, 3));		

			if (modelCheckEndLine($line, 4) != "")
				$this->setResponse($line - 1, "@_END_LINE_FOUR", modelCheckEndLine($line, 4));			
		}	

		/**
		 * @param {String} log
		 */
		private function setLog($log) {
			$this->setResponse(0, "log", $log);
		}
		
		/**
		 * @param {Enderecos} enderecos 
		 * @return {Boolean}
		 */
		public function create($enderecos) {
			$result = "";

			$this->setCreate($enderecos);
			$result = $this->connection->execute($this->getCreate());
			
			return $result;
		}

		/**
		 * @param {String} where
		 * @param {String} order
		 * @param {Boolean} wp
		 * @param {Array}
		 */
		public function read($where, $order, $wp) {
			$line = 0;

			$this->setRead($where, $order);
			$result = $this->connection->execute($this->getRead());

			while ($row = $result->fetch_assoc()) {
				$this->setResponse($line, "enderecos.id", $row["enderecos.id"]);
				$this->setResponse($line, "enderecos.logradouro", $row["enderecos.logradouro"]);
				$this->setResponse($line, "enderecos.logradouro.format.json", modelDoubleQuotesJson($row["enderecos.logradouro"]));
				$this->setResponse($line, "enderecos.logradouro.format", modelDoubleQuotes($row["enderecos.logradouro"]));
				$this->setResponse($line, "enderecos.logradouro.view", addLine($row["enderecos.logradouro"]));
				$this->setResponse($line, "enderecos.numero", $row["enderecos.numero"]);
				$this->setResponse($line, "enderecos.numero.format.json", modelDoubleQuotesJson($row["enderecos.numero"]));
				$this->setResponse($line, "enderecos.bairro", $row["enderecos.bairro"]);
				$this->setResponse($line, "enderecos.bairro.format.json", modelDoubleQuotesJson($row["enderecos.bairro"]));
				$this->setResponse($line, "enderecos.cidade", $row["enderecos.cidade"]);
				$this->setResponse($line, "enderecos.cidade.format.json", modelDoubleQuotesJson($row["enderecos.cidade"]));
				$this->setResponse($line, "enderecos.complemento", $row["enderecos.complemento"]);
				$this->setResponse($line, "enderecos.complemento.format.json", modelDoubleQuotesJson($row["enderecos.complemento"]));
				$this->setResponse($line, "enderecos.cep", $row["enderecos.cep"]);
				$this->setResponse($line, "enderecos.cadastrado", modelDateTime($row["enderecos.cadastrado"]));
				$this->setResponse($line, "enderecos.modificado", modelDateTime($row["enderecos.modificado"]));
			
				$this->setResponse($line, "enderecos.line", $line);
			
				$line++;
				
				if ($wp)
					$this->setDivLine($line);
			}

			$this->connection->free($result);
			
			if ($wp && $line > 0) {
				$this->checkDivLine($line);
				
				$this->setSize($where);
			}

			return $this->getResponse();
		}

		/**
		 * @param {Enderecos} enderecos 
		 * @return {Boolean}
		 */
		public function update($enderecos) {
			$result = "";
			
			$this->setUpdate($enderecos, "enderecos.id = " . $enderecos->getId());
			$result = $this->connection->execute($this->getUpdate());

			return $result;
		}

		/**
		 * @param {String} where
		 * @return {Boolean}
		 */
		public function delete($where) {
			$result = "";
			
			$this->setDelete($where);
			$result = $this->connection->execute($this->getDelete());

			return $result;
		}
		
		/**
		 * @param {Integer} selected
		 * @param {String} order
		 * @return {Array}
		 */
		public function combo($selected, $order) {
			$size = 0;

			$this->setRead("", $order);
			$result = $this->connection->execute($this->getRead());

			while ($row = $result->fetch_assoc()) {
				$this->setResponse($size, "enderecos.id", $row["enderecos.id"]);
				$this->setResponse($size, "enderecos.logradouro", $row["enderecos.logradouro"]);
			
				if ($row["enderecos.id"] == $selected)
					$this->setResponse($size, "enderecos.selected", "selected");
				else
					$this->setResponse($size, "enderecos.selected", "");
					
				$size++;
			}
			
			$this->connection->free($result);
			
			$this->setResponse(0, "size", $size);

			return $this->getResponse();
		}
		
		/**
		 * @param {String} where
		 * @return {Array}
		 */
		public function comboScr($where) {
			$size = 0;

			$this->setRead($where, "");
			$result = $this->connection->execute($this->getRead());

			while ($row = $result->fetch_assoc()) {
				$this->setResponse($size, "enderecos.id", $row["enderecos.id"]);
				$this->setResponse($size, "enderecos.logradouro", $row["enderecos.logradouro"]);
				$this->setResponse($size, "enderecos.selected", "selected");
					
				$size++;
			}
			
			$this->connection->free($result);
			
			$this->setResponse(0, "size", $size);

			return $this->getResponse();
		}

	}

?>